
directive @relation (
    name: String
    direction: String
) on FIELD_DEFINITION


type User {
    id: ID!
    name: String!
    password: String!
    isAdmin: Boolean!
    editedStatements: [EditableStatement]! @relation(name: "EDITED_BY", direction: "IN")
}


interface Reference {
    id: ID!
    shortReference: String!
    statementsReferenced: [EditableStatement!]! @relation(name: "REFERENCE_FOR", direction: "IN")
}

type EditableStatement {
    id: ID!
    field: String!
    statement: String!
    editor: User! @relation(name: "EDITED_BY", direction: "OUT")
    editDate: String!
    deleted: Boolean!
    references: [Reference]!  @relation(name: "REFERENCE_FOR", direction: "OUT")
}

type Author {
    id: ID!
    firstInitial: String!
    surname: String!
    references:[LiteratureReference!]! @relation(name: "AUTHORED_BY", direction: "IN")
}

type Journal  {
    id: ID!
    name: String!
}

type LiteratureReference implements Reference {
    id: ID!
    shortReference: String!
    statementsReferenced: [EditableStatement!]!  @relation(name: "REFERENCE_FOR", direction: "IN")
    authors : [Author!]!  @relation(name: "AUTHORED_BY", direction: "OUT")
    title: String!
    journal: Journal!  @relation(name: "PUBLISHED_IN", direction: "OUT")
    volume: String!
    firstPage: String!
    lastPage: String!
    publicationYear: String!
    DOI: String
    PMID: String
    abstract:  String
}

# could transform current clinicaltrials.gov pipeline to create trial objects
type ClinicalTrial  {
    id: ID!
    name: String!
    resource: String!
    resourceID: String!
    acronym: String
    briefTitle: String
    officialTitle: String!
    references: [Reference!]! @relation(name: "REFERENCE_FOR", direction: "IN")
}

# may want FDA label and/or guideline references?

type MeetingAbstractReference implements Reference {
    id: ID!
    shortReference: String!
    statementsReferenced: [EditableStatement!]!  @relation(name: "REFERENCE_FOR", direction: "IN")
    title: String!
    abstract: String
    meetingName: String!
    meetingDate: String!
    authors : [Author!]!  @relation(name: "AUTHORED_BY", direction: "OUT")
}

type InternetReference implements Reference{
    id: ID!
    shortReference: String!
    statementsReferenced: [EditableStatement!]!  @relation(name: "REFERENCE_FOR", direction: "IN")
    webAddress: String!
    accessedDate: String!
}


type JaxGene   {
    id: ID!
    #    name == Gene Symbox
    name: String!
    #    statement = description
    description: EditableStatement!
    entrezId: String!
    jaxId: String!
    chromosome: String!
    synonyms: [String]!
    canonicalTranscript:[String]!
}

enum Strand {
    Forward
    Reverse
}

type MyGeneInfoGene   {
    id: ID!
    name: String!
    description: EditableStatement!
    chromosome: String!
    strand: Strand!
    start: Int
    end: Int
    synonyms: [String]!
    entrezId: String!
    uniprotEntry: UniprotEntry! @relation(name: "CODED_BY", direction: "IN")
}

type UniprotEntry  {
    id: ID!
    name: String!
    function: EditableStatement!
    uniprotID:String!
    accessionNumber: String!
    gene: MyGeneInfoGene! @relation(name: "CODED_BY", direction: "OUT")
}

interface Target {
    id: ID!
    name: String!
}

type OmniGene implements Target  {
    id: ID!
    name: String!
    panelName: String!
    geneDescription: EditableStatement!
    oncogenicCategory: EditableStatement!
    synonymsString: EditableStatement!
    transcript: EditableStatement!
    myGeneInfoGene: MyGeneInfoGene!
    uniprotEntry: UniprotEntry
    jaxGene: JaxGene
    variants: [GenomicVariant]! @relation(name: "CODED_BY", direction: "OUT")
}

enum OmniConjunction {
    Any
    All
    None
}

interface MarkerComponent {
    id: ID!
    name: String!
    method: EditableStatement!
}

enum DNAMarkerType {
    MicrosatelliteInstabilityLocus
    Karyotype
}

type DNAMarker implements MarkerComponent {
    id: ID!
    name: String!
    method: EditableStatement!
    definition: EditableStatement!
    markerType: DNAMarkerType!
}

type MSIMarker implements MarkerComponent {
    id: ID!
    name: String!
    method: EditableStatement!
}

enum TMBInterpretationType {
    Low
    Intermediate
    High
}

type TMBMarker implements MarkerComponent {
    id: ID!
    name: String!
    method: EditableStatement!
    resultMin: Float
    resultMax: Float
    interpretations: [TMBInterpretationType]
}

type RNASeqSignatureMarker implements MarkerComponent {
    id: ID!
    name: String!
    method: EditableStatement!
    definition: EditableStatement!
    resultMin: Float
    resultMax: Float
    interpretations: [TMBInterpretationType]
    markerProfile: MarkerProfile! @relation(name:"FOR_MARKER_PROFILE", direction:"IN")
}

interface ProteinLevelAssay {
    id: ID!
    name: String!
}

enum AssayComparator {
    #ABOVE
    #BELOW
    EqualsMin
    Range
}

type IHCAssay implements ProteinLevelAssay {
    id: ID!
    name: String!
    antibodyClone: String!
    comparator: AssayComparator!
    #percentPositive: Int!
    # Need to handle non-numeric IHC results like "<1"
    resultMin: Float!
    resultMax: Float
    resultUnits: String!
    proteinExpressionMarkers: [ProteinExpressionMarker]! @relation(name: "HAS_MARKER", direction:"OUT")
}

enum RNASeqResultType {
    nRPM
    RankScore
}

type RNASeqAssay implements ProteinLevelAssay {
    id: ID!
    name: String!
    comparator: AssayComparator!
    #rankScore: Int!
    resultMin: Float!
    resultMax: Float
    resultType: RNASeqResultType!
    proteinExpressionMarkers: [ProteinExpressionMarker]! @relation(name: "HAS_MARKER", direction:"OUT")
}

enum ImmunePhenotype {
    AntiInflammatoryResponse
    CancerTestisAntigen
    CheckpointBlockadePD1CTLA4
    CheckpointBlockadeOther
    MetabolicImmuneEscape
    MyeloidSuppression
    OtherImmunotherapyMarkers
    ProInflammatoryResponse
    TCellPrimed
    TumorInfiltratingLymphocytes
}

enum ImmuneFunction {
    AntiInflammatory
    BCells
    CoInhibitory
    CoStimulatory
    CytotoxicTCellsTRegs
    Immunostimulatory
    Immunosuppressive
    NKCells
    ProInflammatory
    Unknown
}

enum ImmuneCycleRole {
    CancerTestisAntigens
    KillingCancerCells
    TCellInfiltration
    TCellPriming
    TCellRecognition
    TCellTrafficking
}

type ProteinExpressionMarker  implements MarkerComponent {
    id: ID!
    name: String!
    method: EditableStatement!
    synonymsString: EditableStatement!
    gene: OmniGene
    assay: ProteinLevelAssay!
    immunePhenotype: [ImmunePhenotype]!
    immuneFunction: [ImmuneFunction]!
    immuneCycleRole: [ImmuneCycleRole]!
    IHCAssay: IHCAssay! @relation(name: "IHC_ASSAY", direction:"IN")
    RNASeqAssay: RNASeqAssay! @relation(name: "RNASEQ_ASSAY", direction:"IN")
}

type JaxVariant  {
    id: ID!
    name: String!
    description: EditableStatement!
    jaxId: String!
    gene: JaxGene! @relation(name: "CODED_BY", direction: "OUT")
    pDot: String!
    cDot: String!
    gDot: String!
    transcript: String!
    variantType: String!
    proteinEffect: String!
    goVariant: GOVariant  @relation(name: "GO_VARIANT", direction: "IN")
    genomicVariant: GenomicVariant @relation(name: "G_J_VARIANT", direction: "IN")
}

type ClinVarVariant {
    id: ID!
    variantID: String!
    gene: String!
    pDot: String!
    cDot: String!
    significance: String!
    signficanceExplanation:  String!
    genomicVariant: GenomicVariant @relation(name: "G_CV_VARIANT", direction: "IN")
}

type OncoTreeOccurrence {
    id: ID!
    disease: String!
    oncoTreeCode: String!
    percentOccurrence: String!
    occurrences: Int!
    totalSamples: Int!
    perThousandOccurrence: Int!
}

type HotSpotVariant {
    id: ID!
    name: String!
    gene: String!
    referenceAminoAcid: String!
    variantAminoAcid: String!
    begin: String!
    end: String!
    position: Int!
    occurrences: [OncoTreeOccurrence]!
    genomicVariant: GenomicVariant @relation(name: "G_HS_VARIANT", direction: "IN")
}

type GOVariant {
    id: ID!
    name: String!
    gene: String!
    goID: String!
    mutationType: String!
    jaxVariant: JaxVariant! @relation(name: "GO_VARIANT", direction: "OUT")
    genomicVariant: GenomicVariant @relation(name: "G_GO_VARIANT", direction: "IN")
}

enum VariantType {
    CNV
    Fusion
    Indel
    MNV
    Region
    SNV
}

enum IndelType {
    Deletion
    Duplication
    InsertionDeletion
    Insertion
    MNV
    SNV
}

enum RegionType {
    Codon
    Exon
    Gene
}

enum VariantProteinEffect {
    GainOfFunction
    GainOfFunctionPredicted
    LossOfFunction
    LossOfFunctionPredicted
    NoEffect
    Unknown
}

enum CNVType {
    Gain
    Loss
    Indeterminate
}

interface GenomicVariant {
    id: ID!
    name: String!
    description: EditableStatement!
    nonCanonicalTranscript: String
    jaxVariant: JaxVariant @relation(name: "G_J_VARIANT", direction: "OUT")
    clinVarVariant: ClinVarVariant @relation(name: "G_CV_VARIANT", direction: "OUT")
    hotSpotVariant: HotSpotVariant @relation(name: "G_HS_VARIANT", direction: "OUT")
    goVariant: GOVariant @relation(name: "G_GO_VARIANT", direction: "OUT")
}
#    nonCanonicalTranscript: String is empty unless a non-canonical transcript defines this variant

type VariantSNVIndel implements GenomicVariant {
    id: ID!
    name: String!
    description: EditableStatement!
    nonCanonicalTranscript: String
    jaxVariant: JaxVariant @relation(name: "G_J_VARIANT", direction: "OUT")
    clinVarVariant: ClinVarVariant @relation(name: "G_CV_VARIANT", direction: "OUT")
    hotSpotVariant: HotSpotVariant @relation(name: "G_HS_VARIANT", direction: "OUT")
    goVariant: GOVariant @relation(name: "G_GO_VARIANT", direction: "OUT")
    gene: OmniGene! @relation(name: "CODED_BY", direction: "OUT")
    variantType: VariantType!
    indelType: IndelType!
    pDot: String!
    cDot: String!
    gDot: String!
    proteinEffect: VariantProteinEffect!
}

# a region would be general variant terms where a specific cDot/pDot/gDot would not apply
# examples would be BRAF codon 600 mutation, EGFR exon 19 deletion, BRCA1 mutation
# null values for fields below would be considered "wild-cards"
# If we need a protein domain region, we would probably create a separate node
# May need to consider how to define concept of "Activating mutation"
type VariantRegion implements GenomicVariant {
    id: ID!
    name: String!
    description: EditableStatement!
    nonCanonicalTranscript: String
     jaxVariant: JaxVariant @relation(name: "G_J_VARIANT", direction: "OUT")
    clinVarVariant: ClinVarVariant @relation(name: "G_CV_VARIANT", direction: "OUT")
    hotSpotVariant: HotSpotVariant @relation(name: "G_HS_VARIANT", direction: "OUT")
    goVariant: GOVariant @relation(name: "G_GO_VARIANT", direction: "OUT")
    gene: OmniGene! @relation(name: "CODED_BY", direction: "OUT")
    regionType: RegionType!
    regionValue: Int!
    variantTypes: [VariantType]
    indelTypes: [IndelType]
    isFrameshift: Boolean
    isDeleterious: Boolean
    isTruncating: Boolean
    # not sure we would need transcript info for this type of object
    proteinEffect: VariantProteinEffect!
}

type VariantCNV implements GenomicVariant {
    id: ID!
    name: String!
    description: EditableStatement!
    nonCanonicalTranscript: String
    jaxVariant: JaxVariant @relation(name: "G_J_VARIANT", direction: "OUT")
    clinVarVariant: ClinVarVariant @relation(name: "G_CV_VARIANT", direction: "OUT")
    hotSpotVariant: HotSpotVariant @relation(name: "G_HS_VARIANT", direction: "OUT")
    goVariant: GOVariant @relation(name: "G_GO_VARIANT", direction: "OUT")
    gene: OmniGene! @relation(name: "CODED_BY", direction: "OUT")
    copyChange: CNVType!
}

type VariantFusion implements GenomicVariant {
    id: ID!
    name: String!
    description: EditableStatement!
    nonCanonicalTranscript: String
    jaxVariant: JaxVariant @relation(name: "G_J_VARIANT", direction: "OUT")
    clinVarVariant: ClinVarVariant @relation(name: "G_CV_VARIANT", direction: "OUT")
    hotSpotVariant: HotSpotVariant @relation(name: "G_HS_VARIANT", direction: "OUT")
    goVariant: GOVariant @relation(name: "G_GO_VARIANT", direction: "OUT")
    # targetGene is for general fusion like NTRK fusion
    targetGene: OmniGene @relation(name: "CODED_BY", direction: "OUT")
    # 5prime/3prime are for specific fusions like FGFR3 - TACC3 fusion
    gene5Prime: OmniGene @relation(name: "CODED_BY", direction: "OUT")
    exon5Prime: Int
    gene3Prime: OmniGene @relation(name: "CODED_BY", direction: "OUT")
    exon3Prime: Int
    copyChange: CNVType!
}

type GenomicVariantMarker implements MarkerComponent {
    id: ID!
    name: String!
    variant: GenomicVariant!
    method: EditableStatement!
}

type MarkerProfile implements MarkerComponent {
    id: ID!
    name: String!
    method: EditableStatement!
    conjunction: OmniConjunction!
    components: [MarkerComponent]!
    evidenceAssociations: [EvidenceAssociation] @relation(name: "MARKER_FOR", direction: "OUT")
    rnaSeqSignatureMarker: RNASeqSignatureMarker @relation(name:"IS_RNASEQ_SIGNATURE", direction: "OUT")
}

type JaxDrugClass  {
    id: ID!
    name: String!
    jaxId: String!
    drugs: [JaxDrug]! @relation(name: "DRUG_CLASS_MEMBER", direction: "OUT")
}

type JaxDrug  {
    id: ID!
    name: String!
    tradeName: String!
    jaxId: String!
    synonyms: [String]!
    description: EditableStatement!
    drugClasses: [JaxDrugClass]! @relation(name: "DRUG_CLASS_MEMBER", direction: "IN")
}

type NCIDrug  {
    id: ID!
    name: String!
    concept: String!
    definition: String!
    drugCategory: String!
    synonyms: [String]!
    annotationDate: String!
    isAntineoplastic: Boolean!
    isImmuno: Boolean!
    modulator: String!
}

interface TherapyComponent {
    id: ID!
    name: String!
    componentOf: [Therapy]!
}

type DrugCategory  {
    id: ID!
    name: String!
    definition: EditableStatement!
    jaxDrugClass: [JaxDrugClass]!
    drugs: [OmniDrug]! @relation(name: "DRUG_CATEGORY_MEMBER", direction: "OUT")
}

type OmniDrug implements TherapyComponent {
    id: ID!
    name: String!
    tradeName: String!
    definition: EditableStatement!
    drugCategories: [DrugCategory]! @relation(name: "DRUG_CATEGORY_MEMBER", direction: "IN")
    synonymsString: EditableStatement!
    nciDrug: NCIDrug
    jaxDrug: JaxDrug
    componentOf: [Therapy]! @relation(name: "THERAPY_COMPONENT", direction: "IN")
    target: [Target]!
}


type Therapy implements  TherapyComponent {
    id: ID!
    name: String!
    definition: EditableStatement!
    conjunction: OmniConjunction!
    components: [TherapyComponent]! @relation(name: "THERAPY_COMPONENT", direction: "OUT")
    componentOf: [Therapy]! @relation(name: "THERAPY_COMPONENT", direction: "IN")
}


type TherapeuticIntervention  {
    id: ID!
    name: String!
    definition: EditableStatement!
    therapy: Therapy!
    precededBy: [TherapeuticIntervention]!
    followedBy: [TherapeuticIntervention]!
    concurrentWith: [TherapeuticIntervention]!
    evidenceAssociations: [EvidenceAssociation] @relation(name: "THERAPY_FOR", direction: "OUT")
}

type JaxDisease  {
    id: ID!
    name: String!
    parent: JaxDisease @relation(name: "PARENT", direction: "OUT")
    children: [JaxDisease]! @relation(name: "PARENT", direction: "IN")
}

type OntologicalDisease  {
    id: ID!
    name: String!
    omniDisease: String!
    mCode: String!
    jaxDisease: JaxDisease
    parent: OntologicalDisease @relation(name: "PARENT", direction: "OUT")
    children: [OntologicalDisease]! @relation(name: "PARENT", direction: "IN")
    evidenceAssociations: [EvidenceAssociation] @relation(name: "DISEASE_FOR", direction: "OUT")
}

enum EvidenceType {
    #Actionable
    Concensus
    Emerging
}

enum ResponseType {
    Conflicting
    Diagnostic
    NoBenefit
    Prognistic
    Resistant
    Sensitive
    Unknown
}

type EvidenceAssociation  {
    id: ID!
    name: String!
    evidences: [Evidence]! @relation(name: "HAS_EVIDENCE", direction:"OUT")
    therapy: TherapeuticIntervention @relation(name: "HAS_THERAPY", direction:"OUT")
    marker: MarkerProfile @relation(name: "HAS_MARKER", direction: "OUT")
    disease: OntologicalDisease @relation(name: "HAS_DISEASE", direction: "OUT")
}

# do we need Evidence & Outcomes to implement NamedEntity?
type Evidence {
    id: ID!
    evidenceAssociation: [EvidenceAssociation]! @relation(name: "HAS_ASSOCIATION", direction: "IN")
    approvalStatus: String!
    evidenceType: EvidenceType!
    responseType: ResponseType!
    ampCapAscoTier: String!
    notes: String!
    reference:LiteratureReference! @relation(name: "HAS_REFERENCE", direction: "OUT")
    outcomes: [Outcome]! @relation(name: "HAS_OUTCOME", direction: "OUT")
    adverseEvents: [AdverseEvent] @relation(name: "HAS_ADVERSE_EVENT", direction: "OUT")
}

enum EvidenceEndpoint {
    CompleteResponse
    DiseaseControlRate
    ObjectiveResponse
    OverallSurvival
    PartialResponse
    ProgressionFreeSurvival
    ProgressionFreeSurvival6Month
    ProgressionFreeSurvival12Month
    ResponseRate
}

type Outcome {
    id: ID!
    # it is unlikely that an Outcome would be mapped to more than one evidence, but set as array just in case
    evidences: [Evidence]! @relation(name:"")
    endpoint: EvidenceEndpoint
    observationMethod: String
    observation: String
    clinicalCharacteristics: [String]
    treatmentGroup: String
    groupSize: Int
    dose: Int
    doseUnit: String
    outcome: Float!
    outcomeUnit: String!
    outcomeRangeMin: Float
    outcomeRangeMax:Float
    ConfidenceIntervalType: String
    ConfidenceIntervalLo: Float
    ConfidenceIntervalHi: Float
    notes: String
}

type AdverseEvent  {
    id: ID!
    name: String!
    grade: Int
}